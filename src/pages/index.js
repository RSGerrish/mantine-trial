import Head from 'next/head';
import { AppShell, Space, Footer, Header, Center, rem, createStyles } from '@mantine/core';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import clientPromise from '../lib/mongodb'

// Components
import { HeaderMenu } from '../components/HeaderMenu';
import { FooterSimple}  from '../components/FooterSimple';

// Pages
import { Lander } from './Lander';
import { About } from './About';
import { useEffect, useState } from 'react';

// Setup Theme
const useStyles = createStyles((theme) => ({
  containSize: {
    height: '100%',
  },
  noname: {
    height: '100%',
    width: '100%',
    display: 'flex',
    justifyContent: 'center',
  },
  footer: {
    marginTop: 0,
  },
  headerOuter: {
    borderBottom: 0,
  },
}))

// Connect to DB
export async function getServerSideProps(context) {
  try {
    // await clientPromise
    // `await clientPromise` will use the default database passed in the MONGODB_URI
    // However you can use another database (e.g. myDatabase) by replacing the `await clientPromise` with the following code:
    //
    const client = await clientPromise
    const db = client.json
    //
    // Then you can execute queries against your database like so:
    // db.find({}) or any of the MongoDB Node Driver commands

    return {
      props: { isConnected: true },
    }
  } catch (e) {
    console.error(e)
    return {
      props: { isConnected: false },
    }
  }
}

// Render App
export default function Home({ isConnected }) {
  const { classes } = useStyles();
  const [isLoaded, setIsLoaded] = useState(false);

  useEffect(() => {
    if (typeof window === 'object') {
      // Check if document is finally loaded
      setIsLoaded(true);
    }
  }, [])

    return (
      <>
        {isLoaded && <BrowserRouter>
          <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <AppShell
            padding={32}
            header={
              <Header p="md" className={classes.headerOuter}>
                <HeaderMenu 
                  links={[
                    { "link": "/About", "label": "About" },
                    { "link": "/Market", "label": "Farmers Market" },
                    { "link": "/Shop", "label": "Order" }
                  ]}
                />
              </Header>
            }
            footer={
              <Footer>
                <FooterSimple 
                  links={[
                    { "link": "/About", "label": "About" },
                    { "link": "/Market", "label": "Farmers Market" },
                    { "link": "/Shop", "label": "Order" }
                  ]}
                />
              </Footer>
            }
          >
            <Space h="xl" />
            {isConnected ? (
              <Center>
                <h2>You are connected to MongoDB</h2>
              </Center>
            ) : (
              <Center>
                <h2>You are NOT connected to MongoDB!</h2>
              </Center>
            )}
            <Routes>
              <Route
                path="/"
                element={<Lander />}
              />
              <Route
                path="/about"
                element={<About />}
              />
            </Routes>
            {/* <Lander /> */}
            <Space h="xl" />
            <Space h="xl" />
            <Space h="xl" />
            <Space h="xl" />
            <Space h="xl" />
            <Space h="xl" />
          </AppShell>
        </BrowserRouter>}
      </>
    )
  // }
}
